Turbo Assembler	 Version 2.51	     03/05/22 18:52:27	    Page 1
lab_4.ASM



      1	0000			     .MODEL SMALL ;Модель	памяти ближнего типа.
      2	0000			     .STACK 100h ;Отвести под	стек 256 байт.
      3
      4	0000			     .DATA ;Открыть сегментданных.
      5	0000  FFFE 0008	FFFB 0000 +  Mas_A DW -2, 8, -5, 0, 1 ;Коэффициенты	полинома.
      6	      0001
      7	000A  0004		     N DW 4 ;Порядок полинома равен	4.
      8	000C  000A		     X DW 10 ;Аргумент полинома	равен 10.
      9	000E  0000		     Y DW (?) ;Результат вычисления полинома.
     10	0010  4F 56 45 52 46 4C	4F+  Mes_1 DB 'OVERFLOW', 13, 10, '$' ;Сообщение MES_1.
     11	      57 0D 0A 24
     12	001B  52 45 53 55 4C 54	20+  Mes_2 DB 'RESULT MINUS', 13, 10, '$' ;Сообщение MES_2.
     13	      4D 49 4E 55 53 0D	0A+
     14	      24
     15	002A  52 45 53 55 4C 54	20+  Mes_3 DB 'RESULT PLUS', 13, 10, '$' ;Сообщение MES_3.
     16	      50 4C 55 53 0D 0A	24
     17	0038  59 20 3D 20 2D 32	2A+  Res DB 'Y = -2*10^4 + 8*10^3 + -5*10^2 + 0*10 + 1', 13, 10, '$'
     18	      31 30 5E 34 20 2B	20+
     19	      38 2A 31 30 5E 33	20+
     20	      2B 20 2D 35 2A 31	30+
     21	      5E 32 20 2B 20 30	2A+
     22	      31 30 20 2B 20 31	0D+
     23	      0A 24
     24	0064  59 20 3D 20 24	     Y_res DB 'Y = ', '$'
     25	0069  07*(??)		     Y_Asc DB 7	DUP(?) ;Переменная для хранения символов ASCII.
     26	0070  00		     Sign DB (?) ;Переменная для хранения знака числа.
     27	0071  000Er		     Numb DW Y ;Переменная для хранения исходного	числа.
     28				     ;------------------------------------------------------------------------------------------
     29	0073			     .CODE ;Открыть сегмент кодов.
     30
     31	0000			     PREOBR PROC ;Начать процедуру с именем PREOBR.
     32	0000  A1 0071r			 MOV AX, Numb ;Поместить в AX	исходное число.
     33	0003  C6 06 0070r 20		 MOV Sign, ' ' ;Поместить в переменную знака ;символ	    +
     34				     пробела (знак +).
     35	0008  3D 0000			 CMP AX, 0; ;Сравнить число с нулем.
     36	000B  79 07			 JNS M_1; ;Если больше или	равно 0, перейтина ;метку М_1,
     37	000D  C6 06 0070r 2D		 MOV Sign, '-' ;иначе поместить в переменную знака	    +
     38				     ;символ минус (знак	–).
     39	0012  F7 D8			 NEG AX	;Преобразовать в прямой код.
     40	0014			     M_1:
     41	0014  33 C9			 XOR CX, CX ;Очистить CX.
     42	0016  BB 000A			 MOV BX, 10 ;Поместить	в ВХ	делитель равный 10.
     43	0019			     M_2:
     44	0019  33 D2			 XOR DX, DX
     45	001B  F7 F3			 DIV BX
     46	001D  52			 PUSH DX ;Сохранить остаток в стеке.
     47	001E  41			 INC CX
     48	001F  3D 0000			 CMP AX, 0
     49	0022  75 F5			 JNE M_2 ;Если (АХ) не равно 0, повторить	деление.
     50	0024  33 F6			 XOR SI, SI ;Очистить SI.
     51	0026  A0 0070r			 MOV AL, Sign ;Загрузить в AL	знак числа.
     52	0029  88 84 0069r		 MOV Y_Asc[SI],	AL ;Переслать знак	в Y_ASCII.
     53	002D  46			 INC SI
     54	002E			     M_3:
     55	002E  58			 POP AX	;Извлечь	содержимое стека	в AX.
     56	002F  04 30			 ADD AL, 30h ;Вычислить ASCII код для цифры.
     57	0031  88 84 0069r		 MOV Y_Asc[SI] ,AL ;Переслать ASCII код в Y_ASCII.
Turbo Assembler	 Version 2.51	     03/05/22 18:52:27	    Page 2
lab_4.ASM



     58	0035  46			 INC SI
     59	0036  E2 F6			 LOOP M_3 ;Если содержимое СХ не 0, повторить цикл.
     60	0038  C6 84 0069r 24		 MOV Y_Asc[SI],	'$' ;Поместить	символ конца	строки в	Y_ASCII.
     61	003D  C3		     RET ;Возврат из процедуры.
     62	003E			     PREOBR ENDP ;Завершить процедуру	с именем	PREOBR.
     63
     64	003E			     Main:
     65	003E  B8 0000s			 mov AX, @Data
     66	0041  8E D8			 mov DS, AX
     67	0043  BE 0000r			 lea SI, Mas_A
     68	0046  8B 0E 000Ar		 mov CX, N
     69	004A  33 D2			 xor DX, DX
     70	004C  8B 04			 mov AX,[SI]
     71	004E			     F_1:
     72	004E  F7 2E 000Cr		 imul X
     73	0052  70 3D			 jo Mes1
     74	0054  83 C6 02			 add SI, 2
     75	0057  03 04			 add AX, [SI]
     76	0059  70 36			 jo Mes1
     77	005B  E2 F1			 loop F_1
     78	005D  A3 000Er			 mov Y,	AX
     79	0060  3D 0000			 cmp AX, 0
     80	0063  7D 35			 jge Mes3
     81
     82	0065  BA 0038r			 mov DX, offset	Res ;Вывод	сообщения
     83	0068  B4 09			 mov AH, 09 ;на
     84	006A  CD 21			 int 21h ;экран.
     85
     86	006C  BA 001Br			 mov DX, offset	Mes_2 ;Вывод сообщения
     87	006F  B4 09			 mov AH, 09 ;на
     88	0071  CD 21			 int 21h ;экран.
     89
     90	0073  BA 0064r			 mov DX, offset	Y_res ;Вывод сообщения
     91	0076  B4 09			 mov AH, 09 ;на
     92	0078  CD 21			 int 21h ;экран.
     93
     94	007A  E8 FF83			 CALL PREOBR
     95
     96	007D  BA 0069r			 mov DX, offset	Y_Asc ;Вывод сообщения
     97	0080  B4 09			 mov AH, 09 ;на
     98	0082  CD 21			 int 21h ;экран.
     99
    100	0084			     Exit:
    101	0084  B0 00			 mov AL, 0
    102	0086  B4 4C			 mov AH, 4Ch
    103	0088  CD 21			 int 21h
    104	008A			     Res1:
    105	008A  BA 0038r			 mov DX, offset	Res ;Вывод	сообщения
    106	008D  B4 09			 mov AH,09 ;на
    107	008F  CD 21			 int 21h ;экран.
    108	0091			     Mes1:
    109	0091  BA 0010r			 mov DX, offset	Mes_1 ;Вывод сообщения
    110	0094  B4 09			 mov AH,09 ;на
    111	0096  CD 21			 int 21h ;экран.
    112	0098  EB EA			 jmp Exit
    113	009A			     Mes3:
    114	009A  BA 002Ar			 mov DX, offset	Mes_3 ;Вывод сообщения
Turbo Assembler	 Version 2.51	     03/05/22 18:52:27	    Page 3
lab_4.ASM



    115	009D  B4 09			 mov AH, 09 ;на
    116	009F  CD 21			 int 21h ;экран.
    117	00A1  EB E1			 jmp Exit
    118
    119				     END Main
