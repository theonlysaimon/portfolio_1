TITLE CIRCL
;Программа вычисления координат точек окружности и вывод их на экран
;Входные параметры:
; константа для перевода градусы в радианы x360
; число точек на окружности x36
; цвет пикселя forcolor
; координаты центра окружности xc и yc
; значения радиусов по осям x и y rx, ry
; строка с координатами центра окружности xc_yc
;Выходные параметры:
; координаты точки на окружности x и y
; угол поворота радиус-вектора для точки на окружности angl
.MODEL SMALL
;Модель памяти ближнего типа.
.STACK 256
;Отвести под стек 256 байт.
.486
;Используем расширенную систему команд.
.DATA
;Открыть сегмент данных.
x360 DD 180.0
;Константа перевода градусы–радианы.
x36 DW 360
;Число точек на окружности.
forcolor DB 0Ah
;Салатовый цвет.
xc DW 150
;Координаты центра
yc DW 100
;окружности.
rx DW 100
;Значения радиуса по оси x. ry DW 80
;Значения радиуса по оси y. xc_yc DB ‘150,100’,’$’
;Выводимые значения координат.
;================= Переменные ========================= x DW ?
;Координата точки окружности x. y DW ?
;Координата точки окружности y. Angl DW 1
;Угол поворота радиуса.
;----------------------------------------------------------------------------------- ------
.CODE
;Открыть сегмент кодов.
;================ Вывод пикселя ======================== Point PROC
;CX – координата X (столбец), DX – координата Y (строка),
;AL – цвет пиксела pusha mov CX, xc
;Вычисляем координату add CX, x
;x в регистре CX. mov DX, yc
;Вычисляем координату sub DX, y
;y в регистре DX.
mov AL, forcolor
mov BH, 0
mov AH, 12 ;Вывести пиксел
int 10h ;средствами BIOS. popa ret Point ENDP
;============ Закрашивание экрана цветом фона ============== 
Fon PROC
;CX – координата X (столбец), DX – координата Y (строка),
;AL – цвет пиксела
    pusha
    mov CX, 0
    mov DX, 0
    mov AL, 05h
    ;Цвет фона.
    mov BH, 0
    ;Номер страницы. 
c_1: mov AH, 12
;Вывести пиксел
    int 10h ;средствами BIOS.
    inc CX
    cmp CX, 319
    jne c_1
    xor CX, CX
    inc DX
    cmp DX, 199
    jne c_1
    popa
    ret
Fon ENDP
;================ Вывод символа ======================== 
Simv PROC
    pusha
    mov AH, 02 ;Функция установки курсора.
    mov BH, 0 ;Номер текущей страницы.
    mov DL, 20 ;Номер столбца.
    mov DH, 12 ;Номер строки.
    int 10h ;Установка курсора.
    lea SI, xc_yc ;Загрузить смещение строки в SI. 
c_2: mov AH, 0Eh ;Функция вывода символа.
    mov BL, 84h ;Выбор цвета символов.
    loadsb ;Переслать символ из строки DS:SI в AL.
    cmp AL, '$' ;Определить конец строки.
    je exit_pr ;Если конец строки достигнут, выход.
    int 10h
    jmp c_2
exit_pr: popa 
    ret 
Simv ENDP
;=============== Ожидание нажатия клавиши =============== 
WaitKey PROC 
    pusha 
    mov AH, 08h 
    int 21h 
    popa 
    ret 
WaitKey ENDP
;=============== Главная процедура =======================
Main PROC ;Подготовка данных
    mov AX, @DATA ;Инициализация
    mov DS, AX ;регистра DS.
    mov AH, 0 ;Установка графического
    mov AL, 0Dh ;режима 320x200x16
    int 10h ;средствами BIOS.
    call Fon ;Вызов процедуры закрашивания фона.
    call WaitKey ;Вызов процедуры задержки.
    mov CX, x36 ;Число шагов построения окружности.
    finit ;Инициализация сопроцессора.
    fldpi ;Загрузка в стек числа pi. 
    fld x360 ;Загрузка в стек числа 180.
    fdiv ;pi/180, результат в ST(0).
    fstp x360 ;Сохранение в памяти коэффициента перевода градусов в радианы.
;--------------- Вычисление координат точек окружности ------------------ 
do: fld x360 ;Коэффициент градус->радиан в стек. 
    fild angl ;Очередное значения угла в стек. 
    fmul ;Перевод в радианы.
    fsincos ;sin(x) -> st(1), cos(x) -> st(0).
    fild rx ;Загрузка радиуса по координате x. 
    fmul ;Вычисление координаты x=rx*cos(angl). 
    fistp x ;Запись ее в память в формате целого числа с извлечением из стека. 
    fild ry ;Загрузка радиуса по координате y. 
    fmul ;Вычисление координаты y=ry*sin(angl). 
    fistp y ;Запись ее в память в формате целого числа с извлечением из стека. 
    fwait ;Ожидание завершения работы сопроцессора.
    call Point ;Вывод точки на экран.
    inc Angl ;Приращение угла.
    loop do ;Повторить цикл, пока CX не 0. call Simv
    call WaitKey
    mov AX, 4C00h ;Выход в
    int 21h ;DOS.
Main ENDP
    END Main