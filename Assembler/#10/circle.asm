TITLE CIRCL_2
;Программа вычисления координат точек окружности и вывод их на экран
;Входные параметры:
; константа для перевода градусы в радианы x360
; число точек на окружности x36
; цвет пикселя forcolor
; координаты центра окружности xc и yc
; значения радиусов по осям x и y rx, ry
; строка с координатами центра окружности xc_yc
; Выходные параметры:
; координаты точки на окружности x и y
; угол поворота радиус-вектора для точки на окружности angl
.MODEL SMALL	;Модель памяти ближнего типа.
.STACK 256	;Отвести под стек 256 байт.
.486	;Используем расширенную систему команд.

.DATA	;Открыть сегмент данных.
x360 DD 180.0	;Константа перевода градусы–радианы.
x36 DW 360	;Число точек на окружности.
forcolor DB 09h	;Салатовый цвет.
xc DW 300	;Координаты центра
yc DW 250	;окружности.
rx DW 200	;Значения радиуса по оси x. 
ry DW 200	;Значения радиуса по оси y. 
xc_yc DB '300,250','$'	;Выводимые значения координат.
;================= Переменные ========================= 
x DW ?	;Координата точки окружности x. 
y DW ?	;Координата точки окружности y. 
Angl DW 1	;Угол поворота радиуса.
;----------------------------------------------------------------------------------- ------
.CODE	;Открыть сегмент кодов.
;================ Вывод пикселя ======================== 
Point PROC	;начало процедуры Point
;CX – координата X (столбец), DX – координата Y (строка),
;AL – цвет пиксела 
	pusha ;помещение значения регистров в стек
	mov CX, xc	;Вычисляем координату 
	add CX, x	;x в регистре CX. 
	mov DX, yc	;Вычисляем координату 
	sub DX, y	;y в регистре DX.
	mov AL, forcolor	;помещение значения forcolor в al
	mov BH, 0	;страница 0
	mov AH, 12	;Вывести пиксел
	int 10h	;средствами BIOS. 
	popa ;восстанавление из стека значения регистров в обратном порядке
	ret ;возврат из процедуры
Point ENDP	;конец процедуры Point
;============ Закрашивание экрана цветом фона ============== 
Fon PROC	;начало процедуры Fon
;CX – координата X (столбец), DX – координата Y (строка),
;AL – цвет пиксела
	pusha	;помещение значения в стек
	mov CX, 0	; промещение 0 в cx
	mov DX, 0	;промещение 0 в dx
	mov AL, 0Eh	;Цвет фона.
	mov BH, 0	;Номер страницы.
c_1: mov AH, 12	;Вывести пиксел
	int 10h	;средствами BIOS.
	inc CX	; cx + 1
	cmp CX, 639	;сравенение cx с 319
	jne c_1	;перейти к c_1 если ZF=0
	xor CX, CX	;очистка cx
	inc DX	;dx + 1
	cmp DX, 479	;сравенение dx с 199
	jne c_1	;перейти к c_1 если ZF=0
	popa	;восстанавление из стека значения регистров в обратном порядке
	ret		;возврат из процедуры
Fon ENDP	;конец процедуры Fon
;================ Вывод символа ======================== 
Simv PROC	;начало процедуры Simv
	pusha	;помещение значения в стек
	mov AH, 02	;Функция установки курсора.
	mov BH, 0	;Номер текущей страницы.
	mov DL, 40	;Номер столбца.
	mov DH, 15	;Номер строки.
	int 10h	;Установка курсора.
	lea SI, xc_yc	;Загрузить смещение строки в SI. 
c_2: mov AH, 0Eh	;Функция вывода символа.
	mov BL, 89h	;Выбор цвета символов.
	lodsb	;Переслать символ из строки DS:SI в AL.
	cmp AL, '$'	;Определить конец строки.
	je exit_pr	;Если конец строки достигнут, выход
	int 10h	;средствами BIOS.
	jmp c_2	;переход к c_2
exit_pr: popa	; восстанавление из стека значения регистров в обратном порядке
	ret 	;возврат из процедуры
Simv ENDP	;конец процедуры Simv
;=========== Вывод пикселя в центр изображения ==========
pixel PROC
	pusha	;помещение значения регистров в стек
	mov AH, 12	;Вывести пиксел
	mov AL, 00h ;цвет пикселя
	mov cx, xc	;строка
	mov dx, yc	;колонка
	int 10h	;средствами BIOS.
	popa	;восстанавление из стека значения регистров в обратном порядке
	ret	;возврат из процедуры
pixel ENDP
;=============== Ожидание нажатия клавиши =============== 
WaitKey PROC ;начало процедуры WaitKey
	pusha 	;помещение значения в стек
	mov AH, 08h	; функция  
	int 21h ;эхо
	popa ;восстанавление из стека значения регистров в обратном порядке
	ret ;возврат из процедуры
WaitKey ENDP	;конец процедуры WaitKey
;=============== Главная процедура =======================
Main PROC	;начало процедуры Main
;Подготовка данных
	mov AX, @DATA	;Инициализация
	mov DS, AX	;регистра DS.
	mov AH, 0	;Установка графического
	mov AL, 12h	;режима 320x200x16
	int 10h	;средствами BIOS.
	call Fon	;Вызов процедуры закрашивания фона.
	call WaitKey	;Вызов процедуры задержки.
	mov CX, x36	;Число шагов построения окружности.
	finit	;Инициализация сопроцессора.
	fldpi	;Загрузка в стек числа pi. 
	fld x360	;Загрузка в стек числа 180.
	fdiv	;pi/180, результат в ST(0).
	fstp x360	;Сохранение в памяти коэффициента
				;перевода градусов в радианы.
;--------------- Вычисление координат точек окружности ------------------ 
do: fld x360	;Коэффициент градус->радиан в стек. 
	fild angl	;Очередное значения угла в стек. 
	fmul	;Перевод в радианы.
	fsincos	;sin(x) -> st(1), cos(x) -> st(0).
	fild rx	;Загрузка радиуса по координате x. 
	fmul	;Вычисление координаты x=rx*cos(angl). 
	fistp x	;Запись ее в память в формате целого
			;числа с извлечением из стека. 
	fild ry	;Загрузка радиуса по координате y. 
	fmul	;Вычисление координаты y=ry*sin(angl). 
	fistp y	;Запись ее в память в формате целого
			;числа с извлечением из стека. 
	fwait	;Ожидание завершения работы сопроцессора.
	call Point	;Вывод точки на экран.
	inc Angl	;Приращение угла.
	loop do	;Повторить цикл, пока CX не 0. 
	call Simv	;вызов процедуры Simv
	call pixel
	call WaitKey	;вызов процедуры WaitKey
	
	mov AX, 4C00h	;Выход в
	int 21h	;DOS.
Main ENDP	;конец процедуры Main
END Main	;конец Main